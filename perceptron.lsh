(load "threshold.lsh")
(libload "libimage/cca") ;;for connected component analysis
(libload "libimage/rgbaimage")

(defclass perceptron object
	((-int-) size)
	((-int-) calibrated)
	((-idx2- (-double-)) weight)
)

(defmethod perceptron perceptron ()
	(setq size 50)
	(setq weight (double-matrix (* size size)))
)

(defmethod perceptron showImage (bwImage)
	(rgb-draw-matrix 20 20 bwImage 1 1)
)

(defmethod perceptron test (letter path)
	(let (
			(val (==> percept recognize path))
		)

		(printf "Should be: %s => %s -> %s\n" letter val (if (= val letter) "True" "False"))
	)
)

(defmethod perceptron recognize (path)
	((-str-) path)

	(let* (
			;just some values we're going to use
			(letter "a")
			(wght 0)

			(image (image-read-rgba path))

			;the image we're looking at
			(bwImage (==> this threshold image))
			(cc (new CCAnalyzer bwImage))
		)

		(if (==> cc run-analysis 125)
			(progn
				(==> cc cc-analysis)

				;find out what we have
				(setq wght (==> this sign (==> this doThreshold image (select :cc:ccdesc 0 0))))

				;(print "Weight: " wght)
				
				(if (> wght 0)
					(setq letter "A")
					(setq letter "E")
				)
			)

			(print "Nothing was found...umm, are you screwing with me?") ;this is AI stuff, give him an attitude :-P
		)

		letter
	)
)

(defmethod perceptron calibrateDir (path letter)
	(let* (
			(files (glob ".*jpg" (ls (concat path "/" letter))))
			(file ())
		)

		;make sure we always enter the calibrated loop, for different calibration dirs
		(setq calibrated 0)

		(while (= calibrated 0)
			(setq calibrated 1)
			(for (i 0 (- (length files) 1))
				(setq file (concat path "/" letter "/" (nth i files)))
				(print file)
				(==> this calibrateImage (image-read-rgba file) file letter)
			)
		)
	)
)

(defmethod perceptron calibrateImage (image imagePath letter)
	((-idx3- (-ubyte-)) image)
	((-str-) imagePath)
	((-str-) letter)

	(let* (
			(bwImage (==> this threshold image))
			(cc (new CCAnalyzer bwImage))
			(letterOther (if (= letter "a") "e" "a"))
		)

		(if (==> cc run-analysis 125)
			(progn
				(==> cc cc-analysis)
				(==> this showImage bwImage)

				;if we got a crappy read...disregard it and move on
				(if (<> (idx-dim :cc:ccdesc 0) 2)
					(print "Image was crap")

					;there are two letters per calibration image, go for it
					(==> this calibrateArea image (select :cc:ccdesc 0 0) letter)
					(==> this calibrateArea image (select :cc:ccdesc 0 1) letterOther)
				)
			)
		)
	)
)

(defmethod perceptron calibrateArea (in area letter)
	((-idx3- (-ubyte-)) in)
	((-idx1- (-int-)) area)
	((-str-) letter)
	
	(let* (
			;set our expected weight
			(wght (if (= "a" letter) 1 -1))
			
			(sn 0) ;we need this number numerous times, save it
			(term (double-matrix)) ;idx-dotm0 needs a scalar...

			(thr (==> this doThreshold in area))
		)

		(setq sn (==> this sign thr))
		(term (* .5 (- wght sn))) ;the compiler was complaining when this was inline...

		(setq weight (idx-add weight (idx-dotm0 thr term))))

		;see if we got the value we expected to get, otherwise, make it run it again
		(when (<> sn wght)
			(setq calibrated 0)
			(print "Miss: " letter)
		)
	)
)

(defmethod perceptron sign (x)
	((-idx1- (-double-)) x)
	
	(let* (
			(w ((idx-dot weight x)))
		)

		(if (> w 0)
			1
			-1			
		)
	)
)

(defmethod perceptron threshold (image)
	((-idx3- (-ubyte-)) image)
	(threshold image [167 32 2] 40)
)

(defmethod perceptron doThreshold (image area)
	((-idx3- (-ubyte-)) image)
	((-idx1- (-int-)) area)
	
	(let* (
			;for holding copies of things as we resize and shuffle around
			(out (ubyte-matrix 1 1 1))
			(thr (double-matrix (* size size)))
			
			;shortcuts for CC
			(left (area (cc-left)))(right (area (cc-right)))(top (area (cc-top)))(bottom (area (cc-bottom)))
		)

		;get a workable copy of the image
		(setq out (rgbaim-crop image left top (- right left) (- bottom top)))
		(setq out (rgbaim-enlarge out 10 10)) ;enlarge so that we can resize -- if the letter is too small, it refuses to scale up and crashes lush
		(setq out (rgbaim-resize out (to-double size) (to-double size) 1))
		(copy-matrix (==> this threshold out) thr)

		thr
	)
)

(de main ()
	(let* (
			(percept (new perceptron))
			(window (x11-window 0 0 360 280 "Image"))
		)

		;the pictures are arranged into folders inside "calibrate/" depending on which letter comes first in the picture
		(print "Calibrating...")
		(==> percept calibrateDir "calibrate" "a")
		(==> percept calibrateDir "calibrate" "e")

		;(pause "Calibration Done")

		(print "Testing...")
		(==> percept test "A" "a.jpg")
		(==> percept test "E" "e.jpg")
		(==> percept test "A" "a2.jpg")
		(==> percept test "E" "e2.jpg")
		(==> percept test "E" "e3.jpg")
		(==> percept test "E" "e4.jpg")
		(==> percept test "A" "a3.jpg")
		(==> percept test "A" "a4.jpg")
		(==> percept test "E" "e5.jpg")
		(==> percept test "A" "a5.jpg")
	)
)

;
;Cannot build this code -- it fails immensely...every time...there's something wrong with compiling with idx-add, or matrix dimensions with copy-matrix, or something else
;(dhc-make ()
;	(perceptron doThreshold sign calibrateArea)
;)
